/**
 * MyCylinder
 * @constructor
 */
class MyCylinder extends CGFobject {
    constructor(scene, radius_bottom, radius_top, height, slices, stacks) {
        super(scene);
        this.radius_bottom = radius_bottom;
        this.radius_top = radius_top;
        this.slices = slices;
        this.height = height;
        this.stacks = stacks
        this.initBuffers();
    }
    initBuffers() {
        this.vertices = [];
        this.indices = [];
        this.normals = [];
        this.texCoords = [];

        let alphaAng = 2 * Math.PI / this.slices;
        let coordX = 0;
        let section = this.height/this.stacks;
        let radius_difference = (this.radius_top - this.radius_base)/this.stacks;

        let x;
        let y;
        let z;
        let normal;

        for(let i = 0; i <= this.slices; i++){
            for (let j = 0; j <= this.stacks; j++) {
                // All vertices have to be declared for a given face
                // even if they are shared with others, as the normals 
                // in each face will be different
                
                x=(this.radius_bottom + radius_difference*j)*Math.cos(alphaAng*i);
                y=(this.radius_bottom + radius_difference*j)*Math.sin(alphaAng*i);
                z=j*section;

                this.vertices.push(x, y, z);

                normal = [
                    Math.cos(alphaAng*i),
                    Math.sin(alphaAng*i),
                    0
                ];

                //texture coords
                this.texCoords.push(
                    i*this.slices,
                    1 - j/this.stacks
                );

                if(!(i == this.slices && j==this.stacks)){
                    this.indices.push(
                        (i+1)*(this.stacks+1) + j, i*(this.stacks+1) + j+1, i*(this.stacks+1) + j,
                        i*(this.stacks+1) + j+1, (i+1)*(this.stacks+1) + j, (i+1)*(this.stacks+1) + j+1
                    );
                }
            }
        }
/*
        //Base drawing
        ang = 0;

        for(i = 0; i < this.slices; i++){
            let sal=this.radius*Math.sin(ang);
            let cal=this.radius*Math.cos(ang);

            this.vertices.push(cal, 0, -sal);
            this.vertices.push(cal, this.height, -sal);

            this.normals.push(0,-1,0);
            this.normals.push(0,1,0);

            this.indices.push((2*i+2) % (2*this.slices) + 4*this.slices, 4*this.slices+(2*i), 6*this.slices);
            this.indices.push(6*this.slices+1, 4*this.slices+(2*i+1), (2*i+3) % (2*this.slices) + 4*this.slices);

            this.texCoords.push(
                0,0,
                0,0
            );

            ang+=alphaAng;
        }
        
        this.vertices.push(0,0,0);
        this.vertices.push(0,this.height,0);
        this.normals.push(0,-1,0);
        this.normals.push(0,1,0);
        this.texCoords.push(
            0,0,
            0,0
        );
*/
        this.primitiveType = this.scene.gl.TRIANGLES;
        this.initGLBuffers();
    }

    updateBuffers(complexity) {
        this.slices = 3 + Math.round(9 * complexity); //complexity leties 0-1, so slices leties 3-12

        // reinitialize buffers
        this.initBuffers();
        this.initNormalVizBuffers();
    }
}